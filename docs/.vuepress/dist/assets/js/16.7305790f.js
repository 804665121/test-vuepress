(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{291:function(t,s,e){"use strict";e.r(s);var i=e(13),l=Object(i.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"setup注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setup注意事项"}},[t._v("#")]),t._v(" setup注意事项")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("setup执行的时机")]),t._v(" "),s("p",[t._v("在beforeCreate之前执行一次,this是undefined")])]),t._v(" "),s("li",[s("p",[t._v("setup的参数")]),t._v(" "),s("ul",[s("li",[t._v("props :值为对象,包含组件外部传递过来的值,且组件内部声明接收了的属性")]),t._v(" "),s("li",[t._v("context:\n"),s("ul",[s("li",[t._v("attrs: 值为对象,包含:组件外部传递过来,但没有在props配置中声明的属性,相当于 this.$attrs")]),t._v(" "),s("li",[t._v("Slots: 收到的插槽内容,相当于this.$slots")]),t._v(" "),s("li",[t._v("emit : 分发自定义事件的函数,相当于this.$emit")])])])])])])])}),[],!1,null,null,null);s.default=l.exports}}]);